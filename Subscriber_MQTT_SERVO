#include <WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>
#include <U8g2lib.h>
#include <ESP32Servo.h>   // Use the ESP32Servo library which supports ESP32-C3

// ------------------------------
// WiFi & MQTT Settings
// ------------------------------
const char* ssid         = "your_wifi_ssid";
const char* wifiPassword = "your_wifi_password";
const char* mqtt_server  = "YOUR_PUBLIC_IP_OR_DDNS";
const int   mqtt_port    = 1883;
const char* mqtt_user    = "your_username";
const char* mqtt_pass    = "your_password";

const char* topic        = "esp32/messages";

// ------------------------------
// Global Objects
// ------------------------------
WiFiClient espClient;
PubSubClient client(espClient);

// Create a u8g2 object for a 128x64 SSD1306 OLED using hardware I2C with SCL on pin 4 and SDA on pin 3.
// This version uses full-buffer mode.
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, U8X8_PIN_NONE, 4, 3);

// Create the servo object
Servo myServo;  // Note: Using ESP32Servo library instead of the standard Servo library

// ------------------------------
// MQTT Callback Function
// ------------------------------
void callback(char* topic, byte* payload, unsigned int length) {
  // Build the incoming message string (expected to be a number from "0" to "180")
  String message;
  for (unsigned int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("]: ");
  Serial.println(message);

  // Convert the string to an integer (angle)
  int pos = message.toInt();
  if (pos < 0)
    pos = 0;
  if (pos > 180)
    pos = 180;
  
  // Move the servo to the desired position
  myServo.write(pos);
  
  // Update the OLED display with the received angle:
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_ncenB08_tr);
  u8g2.drawStr(0, 20, "Servo Angle:");
  String angleStr = String(pos) + " deg";
  u8g2.drawStr(0, 40, angleStr.c_str());
  u8g2.sendBuffer();
}

// ------------------------------
// Connect to WiFi
// ------------------------------
void setupWiFi() {
  Serial.print("Connecting to WiFi");
  WiFi.begin(ssid, wifiPassword);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.print("WiFi connected! IP: ");
  Serial.println(WiFi.localIP());
}

// ------------------------------
// MQTT Reconnection Routine
// ------------------------------
void reconnectMQTT() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    String clientId = "ESP32Sub-";
    clientId += String(random(0xffff), HEX);
    if (client.connect(clientId.c_str(), mqtt_user, mqtt_pass)) {
      Serial.println(" connected.");
      client.subscribe(topic);
    } else {
      Serial.print(" failed, rc=");
      Serial.print(client.state());
      Serial.println(" - retrying in 5 seconds.");
      delay(5000);
    }
  }
}

// ------------------------------
// Setup Function
// ------------------------------
void setup() {
  Serial.begin(115200);
  
  // Connect to WiFi
  setupWiFi();
  
  // Set MQTT server and callback
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
  
  // Initialize the OLED display
  u8g2.begin();
  delay(100);
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_ncenB08_tr);
  u8g2.drawStr(0, 20, "Waiting for msg...");
  u8g2.sendBuffer();
  
  // Initialize and attach the servo motor:
  // Since the ESP32-C3 does not have a physical pin 13, we use GPIO10 as an example.
  myServo.attach(10);  
  myServo.write(90);  // Set an initial position (e.g., 90Â°)
}

// ------------------------------
// Main Loop
// ------------------------------
void loop() {
  if (!client.connected()) {
    reconnectMQTT();
  }
  client.loop();
}
