#include <esp_now.h>
#include <WiFi.h>
#include <Adafruit_PWMServoDriver.h>

// Data structure matching the sender's structure.
typedef struct struct_message {
    int servoPositions[16];  // For example, desired positions for servos.
} struct_message;

// Global data updated by the callback. Using volatile helps signal that it can change unexpectedly.
volatile struct_message myData;
volatile bool newDataAvailable = false;   // Flag to indicate new data has been received.

Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();

// Callback function for ESP-NOW reception.
void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {
  // Update the data structure with received data.
  memcpy((void*)&myData, incomingData, sizeof(myData));
  newDataAvailable = true;  // Set flag indicating new data is available.
}

void setup() {
  Serial.begin(115200);

  // Initialize Wi-Fi in station mode.
  WiFi.mode(WIFI_STA);

  // Initialize ESP-NOW.
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
 
  // Register the ESP-NOW receive callback.
  esp_now_register_recv_cb(OnDataRecv);
 
  // Initialize the PWM servo driver.
  pwm.begin();
  pwm.setPWMFreq(60);  // Set frequency suitable for servos (typically 50-60 Hz).

  // Other initialization as needed...
}

void loop() {
  // If new data has been received, process it.
  if (newDataAvailable) {
    // Clear the flag early if processing might take time.
    newDataAvailable = false;
   
    // Optionally, copy the data to a local variable to avoid potential race conditions.
    struct_message currentData = myData;
   
    // Use the received data to update servo positions.
    for (int i = 0; i < 16; i++) {
      int servoPosition = currentData.servoPositions[i];
      // Convert servoPosition to the appropriate PWM pulse length.
      // This conversion will depend on your servo and the configuration.
      int pulseLength = map(servoPosition, 0, 180, 150, 600);
      // Move the servo on channel i.
      pwm.setPWM(i, 0, pulseLength);
      Serial.print("Servo ");
      Serial.print(i);
      Serial.print(" set to pulse length: ");
      Serial.println(pulseLength);
    }
   
    // Perform any additional calculations that must occur when new data arrives.
    // ...
  }
 
  // Other non time-critical tasks can run here.
 
  delay(20);  // Small delay to prevent hogging the CPU in this simple example.
}
