#include <WiFi.h>
#include <PubSubClient.h>

// Replace with your Wi-Fi credentials
const char* ssid = "YOUR_SSID";
const char* password = "YOUR_PASSWORD";

// MQTT settings
const char* mqtt_server = "151.49.177.182";
const int   mqtt_port   = 1883;
const char* mqtt_user   = "Tonno16bit";
const char* mqtt_pass   = "987654321";
const char* mqtt_topic  = "servo/angle";

WiFiClient espClient;
PubSubClient client(espClient);

const int potPin = 2;                 // Potentiometer connected to pin 2
int lastPublishedAngle = -1;          // Stores the last published angle

// Connect to Wi-Fi
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to Wi-Fi: ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWi-Fi connected, IP: " + WiFi.localIP().toString());
}

// Reconnect to the MQTT server if needed
void reconnectMQTT() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection from ESP32C3...");
    if (client.connect("ESP32C3_Client", mqtt_user, mqtt_pass)) {
      Serial.println(" connected.");
    } else {
      Serial.print(" failed, rc=");
      Serial.print(client.state());
      Serial.println(" â€“ retrying in 5 seconds.");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
}

void loop() {
  if (!client.connected()) {
    reconnectMQTT();
  }
  client.loop();

  // Read raw ADC value from the potentiometer
  int rawValue = analogRead(potPin);
  
  // Map ADC reading (assumed 0-4095) to angle (0-180)
  int angle = map(rawValue, 0, 4095, 0, 180);
  
  // Publish only if the angle has changed by at least 1 degree
  if (abs(angle - lastPublishedAngle) >= 1) {
    lastPublishedAngle = angle;
    char angleStr[4]; // Buffer for up to a three-digit angle and null terminator
    snprintf(angleStr, sizeof(angleStr), "%d", angle);
    client.publish(mqtt_topic, angleStr);
    Serial.print("Published angle: ");
    Serial.println(angle);
  }
  delay(20);  // Update at roughly 50 Hz for good real-time performance
}
